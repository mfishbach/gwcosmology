#!/usr/bin/env python

"""this script listens for redshift information that is uploaded to gracedb and then takes the redshift and fits file and computes an H_0 posterior
and then uploads the H_0 posterior to gracedb
It also combines it will all the previous events' likelihoods and uploads the cumulative posterior.
In the future it will also maybe get posterior samples.
"""
__author__ = "maya.fishbach@ligo.org, reed.essick@ligo.org"

from argparse import ArgumentParser
import json
import sys
from ligo.gracedb.rest import GraceDb, DEFAULT_SERVICE_URL
import tempfile
from gwcosmology import utils
from gwcosmology.ho import measure_H0_from_skymap, measure_H0_from_datfile

parser = ArgumentParser(description = __doc__)
parser.add_argument("-a", "--hmin", type=float, help="lower prior bound on H0 in km/s/Mpc, default = 20", default=20)
parser.add_argument("-b", "--hmax", type=float, help="upper prior bound on H0 in km/s/Mpc, default = 200",default=200)
parser.add_argument("-z", "--zres", type=float, help="resolution in redshift to define dL-z linear interpolant, default = 0.0005", default = 0.0005)
parser.add_argument("-d", "--Hodef", type=float, help="default H0 value to use in defining cosmology functions in km/s/Mpc, default = 70.0", default = 70.0)
parser.add_argument("-m", "--Om0", type=float, help="Omega_m,0 to use in cosmology functions, default = 0.3", default = 0.3)
parser.add_argument("-r", "--H0res", type=float, help="resolution to use when computing H0 posterior in km/s/Mpc, default = 1", default = 1.0)
parser.add_argument("-g", "--graceid", type=str, help="Grace ID", default=None)
parser.add_argument("-G", "--graceurl", type=str, help= "GraceDB url. default ="+DEFAULT_SERVICE_URL, default=DEFAULT_SERVICE_URL)
parser.add_argument("-n", "--galaxyname", type=str, help= "name of the host galaxy", default = None)
parser.add_argument("-P", "--PEsamps", action = 'store_true')
args = parser.parse_args()

if args.graceid is None: # read in the graceid from an lvalert message
    packet = json.loads(sys.stdin.read())
    args.graceid = packet['uid']

# instantiate the GraceDb object
client = GraceDb(args.graceurl)

# get list of all the files associated with the GraceID
filenames = client.files(args.graceid).json().keys() 
# download redshift information, sky position, and galaxy name
if args.galaxyname is None:
    galaxyfiles = [filename for filename in filenames if filename.startswith('galaxy-')]
    chosen_galaxyfile = galaxyfiles[0]
else:
    chosen_galaxyfile = utils.galaxy_name(args.graceid,args.galaxyname)   
galaxy = json.loads(client.files(args.graceid, chosen_galaxyfile).read()) 

#get z_mean, z_std, ra, dec, name from gracedb
z_mean = galaxy['z']
z_std = galaxy['sigma']
ra = galaxy['RA']
dec = galaxy['DEC']
name = galaxy['name']

if args.PEsamps is False:
#get fits file from gracedb
    fits = [filename for filename in filenames if filename.endswith('fits.gz') or filename.endswith('fits')]
    assert len(fits)>0, 'must have at least one FITS file!'
    chosen_skymap = fits[0] ### NOTE: we should probably be smarter about this...
    skymap_or_PE_file = str(chosen_skymap) # we must cast to this so that the HDF5 encoder is happy

    with open(chosen_skymap, 'w') as out:
       out.write(client.files(args.graceid, chosen_skymap).read())

    #calculate the H0 likelihood
    hs, lh = measure_H0_from_skymap(chosen_skymap, z_mean, z_std, ra, dec, args.Om0, args.Hodef, args.zres, args.hmin, args.hmax, args.H0res)


else:
#get .dat file from gracedb
    dats = [filename for filename in filenames if filename.endswith('.dat')]
    assert len(dats) > 0, 'must have at least one .DAT file!'
    chosen_PEfile = dats[0] ### NOTE: be smarter here too
    skymap_or_PE_file = str(chosen_PEfile)
    with open(chosen_PEfile, 'w') as out:
       out.write(client.files(args.graceid, chosen_PEfile).read())
    #calculate H0 likelihood
    hs, lh = measure_H0_from_datfile(chosen_PEfile, utils.distance_name, z_mean, z_std, args.Om0, args.Hodef, args.zres, args.hmin, args.hmax, args.H0res)

#collect all data in a dictionary
h0data = {'H0_start': hs[0], 'dH0': hs[1]-hs[0], 'num_H0': len(hs), 'H0_likelihood': lh.tolist()}
alldata = {'z': z_mean, 'sigma_z': z_std, 'RA': ra, 'DEC': dec, 'galaxy': name, 'skymap_or_PE_file': skymap_or_PE_file, 'GraceID': args.graceid, 'H0': h0data}

#output to json file
json_fname = utils.h0_name(args.graceid,skymap_or_PE_file,name,args.PEsamps)

with tempfile.TemporaryFile() as obj:
        obj.write(json.dumps(alldata))
        obj.seek(0,0)
        client.writeLog(args.graceid, "H0 likelihood", filename=json_fname, filecontents=obj)

#update H0files dictionary with {'graceid' : [list of files]} in manifest.json file 
