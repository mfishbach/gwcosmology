#!/usr/bin/env python

"""this script listens for redshift information that is uploaded to gracedb and then takes the redshift and fits file and computes an H_0 posterior
and then uploads the H_0 posterior to gracedb
It also combines it will all the previous events' likelihoods and uploads the cumulative posterior.
In the future it will also maybe get posterior samples.
"""
__author__ = "maya.fishbach@ligo.org"

from argparse import ArgumentParser
import json
import sys
from ligo.gracedb.rest import GraceDb, DEFAULT_SERVICE_URL
import tempfile
import h5py
from gwcosmology import utils


parser = ArgumentParser(description = __doc__)
parser.add_argument("-a", "--hmin", type=float, help="lower prior bound on H0 in km/s/Mpc, default = 20", default=20)
parser.add_argument("-b", "--hmax", type=float, help="upper prior bound on H0 in km/s/Mpc, default = 200",default=200)
parser.add_argument("-z", "--zres", type=float, help="resolution in redshift to define dL-z linear interpolant, default = 0.0005", default = 0.0005)
parser.add_argument("-d", "--Hodef", type=float, help="default H0 value to use in defining cosmology functions in km/s/Mpc, default = 70.0", default = 70.0)
parser.add_argument("-m", "--Om0", type=float, help="Omega_m,0 to use in cosmology functions, default = 0.3", default = 0.3)
parser.add_argument("-r", "--H0res", type=float, help="resolution to use when computing H0 posterior in km/s/Mpc, default = 1", default = 1.0)
parser.add_argument("-g", "--graceid", type=str, help="Grace ID", default=None)
parser.add_argument("-G", "--graceurl", type=str, help= "GraceDB url. default ="+DEFAULT_SERVICE_URL, default=DEFAULT_SERVICE_URL)

args = parser.parse_args()

if args.graceid is None: # read in the graceid from an lvalert message
    packet = json.loads(sys.stdin.read())
    args.graceid = packet['uid']

# instantiate the GraceDb object
client = GraceDb(args.graceurl)

# download redshift information AND SKY POSITION
galaxy = json.loads(client.files(args.graceid, utils.galaxy_name(args.graceid)).read())

#get z_mean, z_std, ra, dec from gracedb
z_mean = galaxy['z']
z_std = galaxy['sigma']
ra = galaxy['RA']
dec = galaxy['DEC']

#get fits file from gracedb
filenames = client.files(args.gracedb).json().keys()
fits = [filename for filename in filenames if filename.endswith('fits.gz') or filename.endswith('fits')]
assert len(fits)>0, 'must have at least one FITS file!'
chosen_skymap = fits[0] ### NOTE: we should probably be smarter about this...

with open(chosen_skymap, 'w') as out:
    out.write(client.files(args.graceid, chosen_skymap).read())

hs, lh = measure_H0_from_skymap(chosen_skymap, z_mean, z_std, ra, dec, args.Om0, args.Hodef, args.zres, args.hmin, args.hmax, args.H0res)

hdf5_fname = utils.h0_name(args.graceid,chosen_skymap)
with h5py.File(hdf5_fname,'w') as out:
     dataset = out.create_dataset('H0', data=lh)
     dataset.attrs.create('H0_start', hs[0])
     dataset.attrs.create('dH0', hs[1]-hs[0])
     dataset.attrs.create('num_H0', len(hs))
     dataset.attrs.create('skymap_file', chosen_skymap)
     dataset.attrs.create('graceid', args.graceid)
     dataset.attrs.create('galaxy_info', galaxy)

gracedb.writeLog(args.graceid, "H0 likelihood", filename=hdf5_fname)
