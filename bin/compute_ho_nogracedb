#!/usr/bin/env python

'''
This script takes in a locally-saved skymap or PE file together with manual redshift information about the host galaxy, bypassing GraceDB, and computes the H0 likelihood.
'''
__author__ = "maya.fishbach@ligo.org, reed.essick@ligo.org"

from argparse import ArgumentParser
import json
import sys
from ligo.gracedb.rest import GraceDb, DEFAULT_SERVICE_URL
import tempfile
from gwcosmology import utils
from gwcosmology.ho import measure_H0_from_skymap, measure_H0_from_datfile
import os

parser = ArgumentParser(description = __doc__)
parser.add_argument("-a", "--hmin", type=float, help="lower prior bound on H0 in km/s/Mpc, default = 20", default=20)
parser.add_argument("-b", "--hmax", type=float, help="upper prior bound on H0 in km/s/Mpc, default = 200",default=200)
parser.add_argument("-Z", "--zres", type=float, help="resolution in redshift to define dL-z linear interpolant, default = 0.0005", default = 0.0005)
parser.add_argument("-d", "--Hodef", type=float, help="default H0 value to use in defining cosmology functions in km/s/Mpc, default = 70.0", default = 70.0)
parser.add_argument("-m", "--Om0", type=float, help="Omega_m,0 to use in cosmology functions, default = 0.3", default = 0.3)
parser.add_argument("-r", "--H0res", type=float, help="resolution to use when computing H0 posterior in km/s/Mpc, default = 1", default = 1.0)
parser.add_argument("-g", "--graceid", type=str, help="Grace ID", default=None)
parser.add_argument("-n", "--galaxyname", type=str, help="Name of host galaxy", default=None)
parser.add_argument("-P", "--private", help="add this if the data is prviate", action = 'store_true')
parser.add_argument("-f", "--skyorPEfile", type=str, help="sky map or PE sample file name", default=None)
parser.add_argument("-z", "--zmean", type=float, help="mean redshift", default=None)
parser.add_argument("-s", "--zsigma", type=float, help="standard deviation of redshift, default = 0", default=0.0)
parser.add_argument("-R", "--RA", type=float, help="RA of host galaxy in degrees, required only if using sky map", default=0.0)
parser.add_argument("-D", "--DEC", type=float, help="DEC of host galaxy in degrees, required only if using sky map", default =0.0)
args = parser.parse_args()


z_mean = args.zmean
z_std = args.zsigma
ra = args.RA
dec = args.DEC
name = args.galaxyname
skymap_or_PE_file = args.skyorPEfile

if skymap_or_PE_file.endswith('.dat'):
    PEsamps = True
else:
    PEsamps = False

if PEsamps is False:
    #calculate the H0 likelihood
    hs, lh = measure_H0_from_skymap(skymap_or_PE_file, z_mean, z_std, ra, dec, args.Om0, args.Hodef, args.zres, args.hmin, args.hmax, args.H0res)


else:
    #calculate H0 likelihood
    hs, lh = measure_H0_from_datfile(skymap_or_PE_file, utils.distance_name(), z_mean, z_std, args.Om0, args.Hodef, args.zres, args.hmin, args.hmax, args.H0res)

#collect all data in a dictionary
h0data = {'H0_start': hs[0], 'dH0': hs[1]-hs[0], 'num_H0': len(hs), 'H0_likelihood': lh.tolist()}
alldata = {'z': z_mean, 'sigma_z': z_std, 'RA': ra, 'DEC': dec, 'galaxy': name, 'skymap_or_PE_file': skymap_or_PE_file, 'GraceID': args.graceid, 'H0': h0data}

#output to json file
json_fname = utils.h0_name(args.graceid,skymap_or_PE_file,name,args.private)

with open(json_fname,'w') as out:
    json.dump(alldata,out)

#update H0files dictionary with {'graceid' : [list of files]} in manifest.json file 
manifest_exists = os.path.isfile(utils.H0files_dict_name(args.private))
if manifest_exists:
    with open(utils.H0files_dict_name(args.private), 'r') as f:
        H0files = json.load(f)
        if args.graceid in H0files.keys():
            graceidset = set(H0files[args.graceid])
            graceidset.add(json_fname)
            H0files[args.graceid] = list(graceidset)
        else:
            H0files[args.graceid] = [json_fname]
    with open(utils.H0files_dict_name(args.private),'w') as out:
        json.dump(H0files,out)
else:
    with open(utils.H0files_dict_name(args.private), 'w') as out:
        H0files = {args.graceid: [json_fname]}
        json.dump(H0files,out)
#even if using public sky map, add it to private manifest file as well
if args.private is False:
    private_manifest_exists = os.path.isfile(utils.H0files_dict_name(True))
    if private_manifest_exists:
        with open(utils.H0files_dict_name(True), 'r') as f:
            H0files = json.load(f)
            if args.graceid in H0files.keys():
                graceidset = set(H0files[args.graceid])
                graceidset.add(json_fname)
                H0files[args.graceid] = list(graceidset)
            else:
                H0files[args.graceid] = [json_fname]
        with open(utils.H0files_dict_name(True),'w') as out:
            json.dump(H0files,out)
    else:
        with open(utils.H0files_dict_name(True), 'w') as out:
            H0files = {args.graceid: [json_fname]}
            json.dump(H0files,out)
